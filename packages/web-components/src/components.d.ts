/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CustomButton {
        /**
          * The type of button
         */
        "buttonType": 'primary' | 'round';
        /**
          * Is the button disabled
         */
        "disabled": boolean;
        /**
          * Displays the loading spinner on click
         */
        "displayLoadingSpinner": boolean;
        /**
          * Button state method, this is required for changing the state in the implementation layer
         */
        "setButtonState": (value: 'idle' | 'loading') => Promise<void>;
    }
    interface CustomCard {
        /**
          * Card disabled - this is used for matched cards
         */
        "disabled": boolean;
        /**
          * Image for card
         */
        "image": any;
        /**
          * Card open or closed
         */
        "open": boolean;
        /**
          * Text for card
         */
        "text": any;
    }
    interface CustomFooter {
        /**
          * Shows or hides the back to top button
         */
        "showButton": boolean;
    }
    interface CustomHeader {
    }
    interface CustomModal {
        /**
          * Is the modal in an open state
         */
        "open": boolean;
    }
    interface CustomNavigation {
    }
    interface CustomTimer {
        "resetTimer": () => Promise<void>;
        "stopTimer": () => Promise<void>;
    }
}
declare global {
    interface HTMLCustomButtonElement extends Components.CustomButton, HTMLStencilElement {
    }
    var HTMLCustomButtonElement: {
        prototype: HTMLCustomButtonElement;
        new (): HTMLCustomButtonElement;
    };
    interface HTMLCustomCardElement extends Components.CustomCard, HTMLStencilElement {
    }
    var HTMLCustomCardElement: {
        prototype: HTMLCustomCardElement;
        new (): HTMLCustomCardElement;
    };
    interface HTMLCustomFooterElement extends Components.CustomFooter, HTMLStencilElement {
    }
    var HTMLCustomFooterElement: {
        prototype: HTMLCustomFooterElement;
        new (): HTMLCustomFooterElement;
    };
    interface HTMLCustomHeaderElement extends Components.CustomHeader, HTMLStencilElement {
    }
    var HTMLCustomHeaderElement: {
        prototype: HTMLCustomHeaderElement;
        new (): HTMLCustomHeaderElement;
    };
    interface HTMLCustomModalElement extends Components.CustomModal, HTMLStencilElement {
    }
    var HTMLCustomModalElement: {
        prototype: HTMLCustomModalElement;
        new (): HTMLCustomModalElement;
    };
    interface HTMLCustomNavigationElement extends Components.CustomNavigation, HTMLStencilElement {
    }
    var HTMLCustomNavigationElement: {
        prototype: HTMLCustomNavigationElement;
        new (): HTMLCustomNavigationElement;
    };
    interface HTMLCustomTimerElement extends Components.CustomTimer, HTMLStencilElement {
    }
    var HTMLCustomTimerElement: {
        prototype: HTMLCustomTimerElement;
        new (): HTMLCustomTimerElement;
    };
    interface HTMLElementTagNameMap {
        "custom-button": HTMLCustomButtonElement;
        "custom-card": HTMLCustomCardElement;
        "custom-footer": HTMLCustomFooterElement;
        "custom-header": HTMLCustomHeaderElement;
        "custom-modal": HTMLCustomModalElement;
        "custom-navigation": HTMLCustomNavigationElement;
        "custom-timer": HTMLCustomTimerElement;
    }
}
declare namespace LocalJSX {
    interface CustomButton {
        /**
          * The type of button
         */
        "buttonType"?: 'primary' | 'round';
        /**
          * Is the button disabled
         */
        "disabled"?: boolean;
        /**
          * Displays the loading spinner on click
         */
        "displayLoadingSpinner"?: boolean;
    }
    interface CustomCard {
        /**
          * Card disabled - this is used for matched cards
         */
        "disabled"?: boolean;
        /**
          * Image for card
         */
        "image"?: any;
        /**
          * Card open or closed
         */
        "open"?: boolean;
        /**
          * Text for card
         */
        "text"?: any;
    }
    interface CustomFooter {
        /**
          * Shows or hides the back to top button
         */
        "showButton"?: boolean;
    }
    interface CustomHeader {
    }
    interface CustomModal {
        /**
          * Is the modal in an open state
         */
        "open"?: boolean;
    }
    interface CustomNavigation {
    }
    interface CustomTimer {
    }
    interface IntrinsicElements {
        "custom-button": CustomButton;
        "custom-card": CustomCard;
        "custom-footer": CustomFooter;
        "custom-header": CustomHeader;
        "custom-modal": CustomModal;
        "custom-navigation": CustomNavigation;
        "custom-timer": CustomTimer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-button": LocalJSX.CustomButton & JSXBase.HTMLAttributes<HTMLCustomButtonElement>;
            "custom-card": LocalJSX.CustomCard & JSXBase.HTMLAttributes<HTMLCustomCardElement>;
            "custom-footer": LocalJSX.CustomFooter & JSXBase.HTMLAttributes<HTMLCustomFooterElement>;
            "custom-header": LocalJSX.CustomHeader & JSXBase.HTMLAttributes<HTMLCustomHeaderElement>;
            "custom-modal": LocalJSX.CustomModal & JSXBase.HTMLAttributes<HTMLCustomModalElement>;
            "custom-navigation": LocalJSX.CustomNavigation & JSXBase.HTMLAttributes<HTMLCustomNavigationElement>;
            "custom-timer": LocalJSX.CustomTimer & JSXBase.HTMLAttributes<HTMLCustomTimerElement>;
        }
    }
}
