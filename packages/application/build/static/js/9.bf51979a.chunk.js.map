{"version":3,"sources":["../node_modules/@doggo-memory-game/web-components/dist/esm/custom-timer.entry.js"],"names":["CustomTimer","hostRef","registerInstance","this","resetTimer","a","clearInterval","interval","time","totalSeconds","setInterval","timer","minutes","Math","round","toString","length","seconds","h","class","style"],"mappings":"mNAIMA,EAAW,WACf,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GAFV,qDAKf,WACEE,KAAKC,eANQ,8DAQf,sBAAAC,EAAA,sDACEC,cAAcH,KAAKI,UADrB,gDARe,qHAWf,iCAAAF,EAAA,sDACEC,cAAcH,KAAKI,UACnBJ,KAAKK,KAAO,QACZL,KAAKM,aAAe,EACpBN,KAAKI,SAAWG,aAAY,WAAQ,EAAKC,UAAY,KAJvD,gDAXe,yEAiBf,WAAQ,aACJR,KAAKM,aASPN,KAAKK,KAAL,UAJgB,WACd,IAAMI,EAAWC,KAAKC,MAAM,EAAKL,aAAe,IAAKM,WACrD,OAAOH,EAAQI,OAAS,EAAI,IAAMJ,EAAUA,EAE/BA,GAAf,YARgB,WACd,IAAMK,EAAWJ,KAAKC,MAAM,EAAKL,aAAe,IAAKM,WACrD,OAAOE,EAAQD,OAAS,EAAI,IAAMC,EAAUA,EAMlBA,MA3Bf,oBA6Bf,WACE,OAAQC,YAAE,MAAO,CAAEC,MAAO,iBAAmBhB,KAAKK,UA9BrC,KAiCjBR,EAAYoB,MAnCW","file":"static/js/9.bf51979a.chunk.js","sourcesContent":["import { r as registerInstance, h } from './index-1f52d40b.js';\n\nconst customTimerCss = \"*{font-family:-apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen, Ubuntu, Cantarell, \\\"Open Sans\\\", \\\"Helvetica Neue\\\", sans-serif}.timer-wrapper{width:100px;height:50px;background-color:#035c6f;color:#F7F7F7;line-height:50px;text-align:center;border-radius:25px;font-size:18px;font-weight:bold}\";\n\nconst CustomTimer = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n  }\r\n  /** Called once before component loads */\r\n  componentWillLoad() {\r\n    this.resetTimer();\r\n  }\r\n  async stopTimer() {\r\n    clearInterval(this.interval);\r\n  }\r\n  async resetTimer() {\r\n    clearInterval(this.interval);\r\n    this.time = '00:00';\r\n    this.totalSeconds = 0;\r\n    this.interval = setInterval(() => { this.timer(); }, 1000);\r\n  }\r\n  timer() {\r\n    ++this.totalSeconds;\r\n    const seconds = () => {\r\n      const seconds = (Math.round(this.totalSeconds % 60)).toString();\r\n      return seconds.length < 2 ? '0' + seconds : seconds;\r\n    };\r\n    const minutes = () => {\r\n      const minutes = (Math.round(this.totalSeconds / 60)).toString();\r\n      return minutes.length < 2 ? '0' + minutes : minutes;\r\n    };\r\n    this.time = `${minutes()}:${seconds()}`;\r\n  }\r\n  render() {\r\n    return (h(\"div\", { class: \"timer-wrapper\" }, this.time));\r\n  }\r\n};\r\nCustomTimer.style = customTimerCss;\n\nexport { CustomTimer as custom_timer };\n"],"sourceRoot":""}